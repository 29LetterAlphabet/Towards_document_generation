import json
import pandas as pd
import matplotlib.pyplot as plt
import re
from StringIO import StringIO
import time
import os
import operator
from collections import defaultdict
from itertools import cycle, islice

doc = open('000report.tex', 'w')

doc.write('\\documentclass[12pt]{article}\n\\usepackage{graphicx}\n\\usepackage{float}\n\n')
doc.write('\\title{Report on activity for network telescope 155.x.x/24}\n\\author{For the period 04/07/2013 - 01/02/2014}\n\n\n\\date{Analysis has been performed on datasets extracted from the packet catpure to produce the graphical and tabular output of the report. There has however been no interpretation of the results generated by the report. A latex document of the report has also been created however that can be altered to include an interpretation of resutls.}\n\n')
doc.write('\\begin{document}\n\\maketitle\n\\tableofcontents\n')

ar = ['07/2013','08/2013','09/2013','10/2013','11/2013','12/2013','01/2014','02/2014']
ars = ['2013-07-04','2013-08-01','2013-09-01','2013-10-01','2013-11-01','2013-12-01','2014-01-01','2014-02-01']
ar2 = ['Destination IP','Destination Port TCP','Destination Port UDP','Source IP','Source Port','Geolocation results of source IPs']
ar2s = ['destinationIP','dPortListTCP','dPortListUDP','sourceIP','sourcePort','IPCountry','protocolListTCP','protocolListUDP']
ar2t = ['Destination IP address packet distribution_top20_table','Destination port packet distribution for TCP packets_top20_table','Destination port packet distribution for UDP packets_top20_table','Source IP packet distribution_top20_table','Source port packet distribution_top20_table','Unique source IP frequency by country_top20_table']

input_tables = [x for x in os.listdir(os.getcwd()) if x.endswith("txt")]
input_graphs = [x for x in os.listdir(os.getcwd()) if x.endswith("png")]

hilb = ''
def FindG(x,y):
	for z in input_graphs:
		if ars[x] in z:
			if ar2s[y] in z:
				return z[:-4]
	return '0'

def FindT(x,y):
	for z in input_tables:
		if ars[x] in z:
			if ar2t[y] in z:
				return z
	return '0'

count1 = 0
count2 = 0
countTF = 0
for i in ar:
	print str(i)
	doc.write('\\section{'+i+'}')
	count2 = 0
	for j in ar2:
		doc.write('\\subsection{'+j+'}')
		doc.write('\\begin{figure}[H]\n\\centering\n\\includegraphics[scale=0.7]{{'+FindG(count1,count2)+'}.png}\n\\caption{Destination IP packet count \label{overflow}}\n\\end{figure}\n')
		doc.write('\\begin{table}[H]\n\\centering\n\\caption{'+j+' packets}\n\\begin{tabular} {|c|c|c|}\n\\hline\n'+j+' & Number of packets recorded & Percentage of total packets \\\ \hline \hline\n')
		qqq = FindT(count1,count2)
		doc2 = open(str(qqq))
		for line in doc2:
			word = 'la'
			if countTF == 0:
				countTF = 1
				continue
			try:
				a,b,c = str(line).split('\t')
				doc.write(''+a+' & '+b+' & '+c[:5]+'\\\ \hline\n')
			except:
				word = str(line)
		countTF = 0
		doc.write('\\end{tabular}\n\\end{table}\n'+word+'\n')
		count2 += 1
	count1 += 1

###################################################################################################
def FindGG(x,y):
	for z in input_graphs:
		if z[:4] == 'dark':
			if ar2s[y] in z:
				return z[:-4]
			if 'Hilbert' in z:
				global hilb
				hilb = z

	return '0'

def FindTT(x,y):
	for z in input_tables:
		if z[:4] == 'dark':
			if ar2t[y] in z:
				return z
	return '0'

doc.write('\\section{Entire Dataset}')
count2 = 0
for j in ar2:
	doc.write('\\subsection{'+j+'}')
	doc.write('\\begin{figure}[H]\n\\centering\n\\includegraphics[scale=0.7]{{'+FindGG(count1,count2)+'}.png}\n\\caption{Destination IP packet count \label{overflow}}\n\\end{figure}\n')
	doc.write('\\begin{table}[H]\n\\begin{tabular} {|c|c|c|}\n\\hline\n'+j+' & Number of packets recorded & Percentage of total packets \\\ \hline \hline\n')
	qqq = FindTT(count1,count2)
	doc2 = open(str(qqq))
	for line in doc2:
		if countTF == 0:
			countTF = 1
			continue
		try:
			a,b,c = str(line).split('\t')
			doc.write(''+a+' & '+b+' & '+c[:5]+'\\\ \hline\n')
		except:
			print str(line)
			a,b = str(line).split('\t')
			doc.write(''+a+' & '+b+'\\\ \hline\n')
	countTF = 0
	doc.write('\\end{tabular}\n\\caption{'+j+' packets}\n\\end{table}\n\n')
	count2 += 1
count1 += 1

doc.write('\\subsection{Hilbert curve of darknet}')
doc.write('\\begin{figure}[H]\n\\centering\n\\includegraphics[scale=0.15]{{'+hilb[:-4]+'}.png}\n\\caption{Source IP packet count \label{overflow}}\n\\end{figure}\n')


doc.write('\\end{document}')

doc.close()

os.system("pdflatex 000report.tex")